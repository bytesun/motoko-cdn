{"version":3,"sources":["declarations/backend/backend.did.js","declarations/backend/index.js","agent.ts","App.tsx","index.tsx"],"names":["idlFactory","IDL","Timestamp","Int","FileId__1","Text","FileExtension","Variant","Null","FileData","Record","Principal","Nat","FileId","FileInfo","Service","Func","Vec","Opt","Nat8","Tuple","canisterId","process","createActor","options","agent","HttpAgent","agentOptions","Actor","actorOptions","authClient","async","ac","AuthClient","create","identity","getIdentity","BackendActor","MAX_CHUNK_SIZE","getReverseFileExtension","type","Object","keys","CdnElement","updateDeps","setErrros","fileData","setFileData","useState","file","setFile","name","size","blob","Blob","width","height","ready","setReady","uploading","setUploading","value","setValue","processAndUploadChunk","byteStart","fileId","chunk","fileSize","blobSlice","slice","Math","min","Number","bsf","arrayBuffer","getBackendActor","putFileChunks","BigInt","Array","from","Uint8Array","encodeArrayBuffer","Fragment","Col","className","Progress","multi","animated","bar","color","max","Input","onChange","event","target","files","reader","FileReader","readAsDataURL","onloadend","result","Error","encoded","toString","replace","length","repeat","b64Data","contentType","sliceSize","byteCharacters","atob","byteArrays","offset","byteNumbers","i","charCodeAt","byteArray","push","b64toBlob","fileInfo","round","src","Button","onClick","preventDefault","fileExtension","getFileExtension","console","log","errors","undefined","t0","performance","now","random","substring","createdAt","Date","chunkCount","ceil","extension","ba","putFileInfo","putChunkPromises","Promise","all","updateStatus","t1","Canisters","rerender","containers","setContainers","loading","setLoading","useEffect","updateContainers","useCallback","status","getStatus","role","map","element","cid","fromUint8Array","toUint8Array","toText","FilesInfo","filesInfo","setFilesInfo","img","setImg","fileLoading","setFileLoading","currentPage","setCurrentPage","getFilesInfo","getAllFiles","handlePagination","e","index","pagesCount","Row","Table","data","fi","chunks","getFileChunk","buffer","url","URL","createObjectURL","loadChunks","Pagination","PaginationItem","disabled","PaginationLink","previous","href","page","active","next","navigator","clipboard","writeText","revokeObjectURL","App","deps","setDeps","erorrs","setErrors","Container","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d12cf0d.chunk.js","sourcesContent":["export const idlFactory = ({ IDL }) => {\n  const Timestamp = IDL.Int;\n  const FileId__1 = IDL.Text;\n  const FileExtension = IDL.Variant({\n    'aac' : IDL.Null,\n    'avi' : IDL.Null,\n    'gif' : IDL.Null,\n    'jpg' : IDL.Null,\n    'mp3' : IDL.Null,\n    'mp4' : IDL.Null,\n    'png' : IDL.Null,\n    'svg' : IDL.Null,\n    'wav' : IDL.Null,\n    'jpeg' : IDL.Null,\n  });\n  const FileData = IDL.Record({\n    'cid' : IDL.Principal,\n    'name' : IDL.Text,\n    'createdAt' : Timestamp,\n    'size' : IDL.Nat,\n    'fileId' : FileId__1,\n    'chunkCount' : IDL.Nat,\n    'extension' : FileExtension,\n    'uploadedAt' : Timestamp,\n  });\n  const FileId = IDL.Text;\n  const FileInfo = IDL.Record({\n    'name' : IDL.Text,\n    'createdAt' : Timestamp,\n    'size' : IDL.Nat,\n    'chunkCount' : IDL.Nat,\n    'extension' : FileExtension,\n  });\n  const Container = IDL.Service({\n    'getAllFiles' : IDL.Func([], [IDL.Vec(FileData)], []),\n    'getFileChunk' : IDL.Func(\n        [FileId, IDL.Nat, IDL.Principal],\n        [IDL.Opt(IDL.Vec(IDL.Nat8))],\n        [],\n      ),\n    'getFileInfo' : IDL.Func([FileId, IDL.Principal], [IDL.Opt(FileData)], []),\n    'getStatus' : IDL.Func(\n        [],\n        [IDL.Vec(IDL.Tuple(IDL.Principal, IDL.Nat))],\n        ['query'],\n      ),\n    'putFileChunks' : IDL.Func(\n        [FileId, IDL.Nat, IDL.Nat, IDL.Vec(IDL.Nat8)],\n        [],\n        [],\n      ),\n    'putFileInfo' : IDL.Func([FileInfo], [IDL.Opt(FileId)], []),\n    'updateStatus' : IDL.Func([], [], []),\n    'wallet_receive' : IDL.Func([], [], []),\n  });\n  return Container;\n};\nexport const init = ({ IDL }) => { return []; };\n","import { Actor, HttpAgent } from \"@dfinity/agent\";\n\n// Imports and re-exports candid interface\nimport { idlFactory } from './backend.did.js';\nexport { idlFactory } from './backend.did.js';\n// CANISTER_ID is replaced by webpack based on node environment\nexport const canisterId = process.env.BACKEND_CANISTER_ID;\n\n/**\n * \n * @param {string | import(\"@dfinity/principal\").Principal} canisterId Canister ID of Agent\n * @param {{agentOptions?: import(\"@dfinity/agent\").HttpAgentOptions; actorOptions?: import(\"@dfinity/agent\").ActorConfig}} [options]\n * @return {import(\"@dfinity/agent\").ActorSubclass<import(\"./backend.did.js\")._SERVICE>}\n */\n export const createActor = (canisterId, options) => {\n  const agent = new HttpAgent({ ...options?.agentOptions });\n  \n  // Fetch root key for certificate validation during development\n  if(process.env.NODE_ENV !== \"production\") {\n    agent.fetchRootKey().catch(err=>{\n      console.warn(\"Unable to fetch root key. Check to ensure that your local replica is running\");\n      console.error(err);\n    });\n  }\n\n  // Creates an actor with using the candid interface and the HttpAgent\n  return Actor.createActor(idlFactory, {\n    agent,\n    canisterId,\n    ...options?.actorOptions,\n  });\n};\n  \n/**\n * A ready-to-use agent for the backend canister\n * @type {import(\"@dfinity/agent\").ActorSubclass<import(\"./backend.did.js\")._SERVICE>}\n */\n export const backend = createActor(canisterId);\n","import { Actor, HttpAgent, ActorSubclass } from '@dfinity/agent';\nimport { AuthClient } from \"@dfinity/auth-client\";\nimport { _SERVICE } from \"./declarations/backend/backend.did\";\nimport { createActor, canisterId } from \"./declarations/backend\";\n\nexport namespace BackendActor {\n  var authClient: AuthClient;\n  export async function setAuthClient(ac: AuthClient) {\n    authClient = ac;\n  }\n  export async function getBackendActor(): Promise<ActorSubclass<_SERVICE>> {\n    if (!authClient) {\n      authClient = await AuthClient.create();\n    }\n    const identity = authClient.getIdentity();\n    const backendActor = createActor(canisterId as string, {\n      agentOptions: {\n        identity, \n      }\n    });\n  \n    return backendActor;\n  }\n};","import React, { useEffect, useState, useCallback } from 'react';\nimport { Col, Input, Progress, Row, Table, Button, Container, Pagination, PaginationLink, PaginationItem } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Principal } from \"@dfinity/principal\";\nimport './App.css';\n\nimport { BackendActor }  from './agent';\nimport { FileExtension, FileInfo } from './declarations/backend/backend.did';\n\nconst MAX_CHUNK_SIZE = 1024 * 500; // 500kb\n\nconst getReverseFileExtension = (type: { string: null }) : string => {\n  switch(Object.keys(type)[0]) {\n    case 'jpeg':\n      return  'image/jpeg';\n    case 'gif':\n      return  'image/gif'; \n    case 'jpg':\n      return  'image/jpg';       \n    case 'png':\n      return  'image/png';\n    case 'svg':\n      return  'image/svg';\n    case 'avi':\n      return  'video/avi';\n    case 'mp4':\n      return  'video/mp4';\n    case 'aac':\n      return  'video/aac';\n    case 'wav':\n      return  'audio/wav';\n    case 'mp3':\n      return  'audio/mp3';                                                                                                              \n    default :\n    return \"\";\n  }\n};\n\nconst getFileExtension = (type: string) : FileExtension | null => {\n  switch(type) {\n    case 'image/jpeg':\n      return { 'jpeg' : null };\n    case 'image/gif':\n      return { 'gif' : null };\n    case 'image/jpg':\n      return { 'jpg' : null };\n    case 'image/png':\n      return { 'png' : null };          \n    case 'image/svg':\n      return { 'svg' : null };          \n    case 'video/avi':\n      return { 'avi' : null };                            \n    case 'video/aac':\n      return { 'aac' : null };\n    case 'video/mp4':\n      return { 'mp4' : null };        \n    case 'audio/wav':\n      return { 'wav' : null };                         \n    case 'audio/mp3':\n      return { 'mp3' : null };\n    default :\n    return null;\n  }\n};\n\nconst CdnElement: React.FC<any> = ({ updateDeps, setErrros }) => {\n\n    const [fileData, setFileData] = useState('Drag and drop a file or select add File');\n    const [file, setFile] = useState<FileReaderInfo>({\n      name: '',\n      type: '',\n      size: 0,\n      blob: new Blob(),\n      width: 0,\n      file: 0,\n      height: 0\n    });\n    const [ready, setReady] = useState(false);\n    const [uploading, setUploading] = useState(false);\n    let [value, setValue] = useState(0);\n\n    interface FileReaderInfo {\n      name: string;\n      type: string;\n      size: number;\n      blob: Blob;\n      width: number;\n      file: number;\n      height: number;\n    }\n\n    const b64toBlob = (b64Data: string, contentType='', sliceSize=512) => {\n      \n      const byteCharacters = atob(b64Data);\n      const byteArrays = [];\n    \n      for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\n    \n        const byteNumbers = new Array(slice.length);\n        for (let i = 0; i < slice.length; i++) {\n          byteNumbers[i] = slice.charCodeAt(i);\n        }\n    \n        const byteArray = new Uint8Array(byteNumbers);\n        byteArrays.push(byteArray);\n      }\n      const blob = new Blob(byteArrays, { type: contentType } );\n      return blob;\n  }\n\n    const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n        setErrros([]);\n        setReady(false);\n        // @ts-ignore\n        const file = event.target.files[0];\n        // Make new FileReader\n        const reader = new FileReader();\n        // Convert the file to base64 text\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n          if (reader.result === null) {\n            throw new Error('file empty...');\n          }\n          let encoded = reader.result.toString().replace(/^data:(.*,)?/, '');\n          if ((encoded.length % 4) > 0) {\n            encoded += '='.repeat(4 - (encoded.length % 4));\n          }\n          const blob = b64toBlob(encoded, file.type);\n          const fileInfo: FileReaderInfo = {\n            name: file.name,\n            type: file.type,\n            size: file.size,\n            blob: blob,\n            file: file,\n            width: file.width,\n            height: file.height\n          };\n          setFileData(file.name + ' | ' + Math.round(file.size / 1000) + ' kB');\n          setFile(fileInfo);\n          setReady(true);\n        };\n    };\n\n    const encodeArrayBuffer = (file: ArrayBuffer): number[] =>\n      Array.from(new Uint8Array(file));\n\n    const processAndUploadChunk = async (\n      blob: Blob,\n      byteStart: number,\n      fileId: string,\n      chunk: number,\n      fileSize: number,\n    ) : Promise<any> => {\n      const blobSlice = blob.slice(\n        byteStart,\n        Math.min(Number(fileSize), byteStart + MAX_CHUNK_SIZE),\n        blob.type\n      );\n     \n      const bsf = await blobSlice.arrayBuffer();\n      const ba = await BackendActor.getBackendActor();\n      // console.log(fileId);\n      // console.log(chunk);\n      // console.log(fileSize);\n      // console.log(encodeArrayBuffer(bsf));\n      return ba.putFileChunks(fileId, BigInt(chunk), BigInt(fileSize), encodeArrayBuffer(bsf));\n    }\n\n    // const infiniteTest = async(event: React.FormEvent<HTMLButtonElement>) => {\n      // event.preventDefault();\n    //   // console.log(chunks);\n    //   // console.log(fileInfo);\n    //   const ba = await getBackendActor();\n    //   var i = 1;                  //  set your counter to 1\n    //   async function myLoop() {         //  create a loop function\n    //     const fileId = (await ba.putFileInfo(fileInfo))[0] as string;\n    //     console.log(\"done1\");\n    //     const fileBuffer =  file.buffer || new ArrayBuffer(0);\n    //     const putChunkPromises: Promise<undefined>[] = [];\n    //     let chunk = 1;\n    //     for (let byteStart = 0; byteStart < file.size; byteStart += MAX_CHUNK_SIZE, chunk++ ) {\n    //       putChunkPromises.push(\n    //         processAndUploadChunk(fileBuffer, byteStart, file.size, fileId, BigInt(chunk))\n    //       );\n    //     }\n    //     console.log('done2');\n    //     await Promise.all(putChunkPromises);\n    //     console.log('done3');\n    //     await new Promise(resolve => setTimeout(resolve, 10000))\n    //     console.log('10 sec timeout');\n    //     if (i < 100) {\n    //       await myLoop();\n    //     }\n    //   }\n\n    //   await myLoop();       \n    // }\n\n    const handleUpload = async (event: React.FormEvent<HTMLButtonElement>) => {\n      event.preventDefault();\n      const fileExtension = getFileExtension(file.type);\n      console.log(fileExtension);\n      const errors = [];\n      if (file === null || file === undefined || fileExtension === null) {\n        errors.push(\"File not valid!\");\n      }\n      if (file.size > 10550000) {\n        errors.push(\"File size shouldn't be bigger than 10mb\");\n      }\n\n      if (errors.length > 0) {\n        setErrros(errors);\n        return;\n      }\n      \n      const t0 = performance.now();\n      console.log('upload started...');\n      setUploading(true);\n      const fileInfo : FileInfo = {\n        name: Math.random().toString(36).substring(2),\n        createdAt: BigInt(Number(Date.now() * 1000)),\n        size: BigInt(file.size),\n        chunkCount: BigInt(Number(Math.ceil(file.size / MAX_CHUNK_SIZE))),\n        // @ts-ignore\n        extension: fileExtension,\n      };\n      const ba = await BackendActor.getBackendActor();\n      setValue(10);\n      // const authenticated = await authClient.isAuthenticated();\n      // console.log(authenticated);\n      const fileId = (await ba.putFileInfo(fileInfo))[0] as string;\n      // console.log(fileId);\n      setValue(40);\n      const blob = file.blob;\n      const putChunkPromises: Promise<undefined>[] = [];\n      let chunk = 1;\n      for (let byteStart = 0; byteStart < blob.size; byteStart += MAX_CHUNK_SIZE, chunk++ ) {\n        putChunkPromises.push(\n          processAndUploadChunk(blob, byteStart, fileId, chunk, file.size)\n        );\n      }\n      await Promise.all(putChunkPromises);\n      await ba.updateStatus();\n      setValue(100);\n      setUploading(false);\n      setReady(false);\n      updateDeps();\n      setFileData('Drag and drop a file or select add File');\n      const t1 = performance.now();\n      console.log(\"Upload took \" + (t1 - t0) / 1000 + \" seconds.\")\n      \n    }\n\n    if (uploading) {\n        return  <React.Fragment>\n          <Col className='col-8'>\n          <div className=\"image-upload-wrap\">\n            <Progress multi>\n                <Progress animated bar color=\"success\" value={value} max=\"100\"/>\n            </Progress>\n            </div>\n          </Col>\n      </React.Fragment>;\n    }\n    return <React.Fragment>\n        <Col className=\"col-8\">\n            <div className=\"image-upload-wrap\">\n              <div className=\"drag-text\">\n              <Input className=\"file-upload-input\" type='file' onChange={handleChange} />\n                <h3>{fileData}</h3>\n                <img src='http://100dayscss.com/codepen/upload.svg' className='upload-icon'/>\n              </div>\n            </div>\n            {!!ready && \n                  <Button className=\"file-upload-btn\" type=\"button\"  onClick={handleUpload} >Upload</Button>\n            }\n        </Col>\n    </React.Fragment>;\n\n};\n\nconst Canisters: React.FC<any> = ({ rerender }) => {\n\n  let [containers, setContainers] = useState([] as any);\n  let [loading, setLoading] = useState(false);\n  useEffect(() => {\n    console.log('triggers canisters');\n    setLoading(true);\n    updateContainers();\n  }, [rerender]);\n\n  const updateContainers = useCallback(async () => {\n    console.log('updating....');\n    const ba = await BackendActor.getBackendActor();\n    const status = await ba.getStatus();\n    setContainers(status);\n    setLoading(false);\n  }, []);\n\n  if (loading){\n    return <div className=\"spinner-border\" role=\"status\"></div>\n  } \n    \n\n  return <React.Fragment> \n  <Col  className=\"col-12\">\n  {containers.map((element: any) => {\n    const cid = Principal.fromUint8Array(element[0].toUint8Array()).toText();\n     return (\n      <ul className=\"list-group\">\n        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n          {cid}\n          <span className=\"badge badge-primary badge-pill text-danger\">Free space: {Number(element[1]) / 1000} Kb</span>\n        </li>\n      </ul>\n      )\n    })}\n  </Col>\n  </React.Fragment>\n};\n\nconst FilesInfo : React.FC<any> = ({ rerender }) => {\n  const [filesInfo, setFilesInfo] = useState([] as any);\n  const [img, setImg] = useState(\"\");\n  const [fileLoading, setFileLoading] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  useEffect(() => {\n    console.log('triggers files...');\n    setLoading(true);\n    getFilesInfo();\n  }, [rerender]);\n\n  const getFilesInfo = async () => {\n    const ba = await BackendActor.getBackendActor();\n    const files = await ba.getAllFiles();\n    // console.log(files); \n    setFilesInfo(files);\n    setLoading(false);\n  };\n\n  const clean = () => {\n    if (img !== '') {\n      URL.revokeObjectURL(img);\n      setImg('');\n    }\n  };\n\n  const handlePagination = (e: any, index: number) => {\n    e.preventDefault();\n    setCurrentPage(index);\n  }\n\n  const loadChunks = async (e: React.FormEvent<HTMLButtonElement>, fi: any) => {\n    e.preventDefault();\n    setImg(\"\");\n    setFileLoading(true);\n    const ba = await BackendActor.getBackendActor();\n    // const chunk = await ba.getFileChunk(fi.fileId, BigInt(1));\n    // console.log(chunk);\n    const chunks = [];\n    for (let i = 1; i <= Number(fi.chunkCount); i++) {\n      const chunk = await ba.getFileChunk(fi.fileId, BigInt(i), fi.cid);\n      if (chunk[0]) {\n        chunks.push(new Uint8Array(chunk[0]).buffer);\n      }\n    }\n    const blob = new Blob(chunks, { type: getReverseFileExtension(fi.extension)} );\n    const url = URL.createObjectURL(blob);\n    setImg(url);\n    setFileLoading(false);\n  }\n  if (loading){\n    return <Col className=\"col-6\"><div className=\"spinner-border\" role=\"status\"></div></Col>\n  }\n  const pageSize = 5;\n  const pagesCount = Math.ceil(filesInfo.length / pageSize);\n  return <React.Fragment>\n    <Row>\n        <Col className=\"col-6\">\n          <Table>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Size</th>\n                <th>Extension</th>\n                <th>Canister ID</th>\n                <th>View</th>\n              </tr>\n            </thead>\n            <tbody>\n          {filesInfo\n            .slice(\n              currentPage * pageSize,\n              (currentPage + 1) * pageSize\n            )\n            .map((data: any, i: any) => {\n              console.log(data);\n              const cid = Principal.fromUint8Array(data.cid.toUint8Array()).toText();\n              const extension = Object.keys(data.extension)[0];\n              return <tr key={i}>\n                    <th >{data.fileId}</th>\n                    <td>{Number(data.size) / 1000} Kb</td>\n                    <td>{extension}</td>\n                    <td>{cid}</td>\n                    <td><Button onClick={(e) => loadChunks(e, data)}>Load</Button></td>\n                </tr>\n            })}\n             </tbody>\n              </Table>\n              <Pagination aria-label=\"cdn navigation\">\n            <PaginationItem disabled={currentPage <= 0}>\n              <PaginationLink\n                onClick={e => handlePagination(e, currentPage - 1)}\n                previous\n                href=\"#\"\n              />\n            </PaginationItem>\n\n            {[...Array(pagesCount)].map((page, i) => \n              <PaginationItem active={i === currentPage} key={i}>\n                <PaginationLink onClick={e => handlePagination(e, i)} href=\"#\">\n                  {i + 1}\n                </PaginationLink>\n              </PaginationItem>\n            )}\n            <PaginationItem disabled={currentPage >= pagesCount - 1}>\n              \n              <PaginationLink\n                onClick={e => handlePagination(e, currentPage + 1)}\n                next\n                href=\"#\"\n              />\n            </PaginationItem>\n          </Pagination>\n        </Col>\n        <Col className=\"col-6\">\n          {fileLoading && \n          <div className=\"spinner-border\" role=\"status\">\n            </div>\n          }\n          {(img !== '') && \n            <div>\n              <p>Open this in a new tab: {img}</p>\n              <Button onClick={() => {navigator.clipboard.writeText(img)}}>Copy to clipboard</Button>\n              <Button onClick={clean}>Clean Blob</Button> \n            </div>\n          }\n          \n        </Col>\n      </Row>\n  </React.Fragment>;\n\n}\n\n\nfunction App() {\n\n  const [deps, setDeps] = useState(false);\n  const [erorrs, setErrors] = useState([]);\n  const updateDeps = () => {\n    console.log('force reupdate child...');\n    setDeps(!deps);\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <br/><br/>\n        {erorrs && erorrs.map((err) => {\n            return (\n              <div className=\"alert alert-danger\" role=\"alert\">{err}</div>\n            )\n        })}\n        <br/><br/>\n        <Row>\n          <Col className=\"col-12\">\n          <div className=\"alert alert-warning\" role=\"alert\">\n                Max file size: 10mb -----\n                Accepted extensions: jpeg, gif, jpg, png, svg, avi, aac, mp4, wav, mp3 \n            </div>\n          </Col>\n          <Col className=\"col-6\">\n          <CdnElement updateDeps={updateDeps} setErrros={setErrors} />\n          </Col>\n          <Col className=\"col-6\">\n          <Canisters rerender={deps}/>\n          </Col>\n        </Row>\n        <br/><br/>\n        <FilesInfo rerender={deps}/>\n        <br/>\n        <br/>\n      </Container>\n      <footer className=\"footer\">\n          <div className=\"alert alert-info\" role=\"alert\">\n                You can check the code here:  \n                <a href=\"https://github.com/gabrielnic/motoko-cdn\" target=\"_blank\" className=\"alert-link\"> Source Code</a>\n          </div>\n      </footer>\n        \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}